package actually.portals.ActuallySize.pickup.item;

import net.minecraft.client.renderer.block.model.ItemOverrides;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.resources.model.*;
import net.minecraft.resources.ResourceLocation;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import net.minecraftforge.client.model.geometry.IGeometryBakingContext;
import net.minecraftforge.client.model.geometry.IUnbakedGeometry;

import java.util.function.Function;

/**
 * This class will "bake" models, except I am only interested in
 * overriding the renderer so the models generated by this are
 * completely empty.
 * <p>
 * Minecraft allows us the delicious capability of resource packs.
 * To accomplish this it needs a powerful (and convoluted) system to
 * load models and textures. I wished to display the entity you pick
 * up rather than a texture from a resourcepack, this means overriding
 * the rendering of the item. These are the steps I had to take:
 * <p>
 * (1) Create a Model Loader - to load model bakers into the engine {@link ASIPSHeldEntityModelLoader}
 * <p>
 * (2) Create a Model Baker - to bake the models we will use {@link ASIPSHeldEntityModelBaker}
 * <p>
 * (3) Create a Baked Model - to override the rendering of the model {@link ASIPSHeldEntityModelBaked}
 * <p>
 * (4) Extend {@link net.minecraft.world.item.Item} class - to manage your desired data {@link ASIPSHeldEntityItem}
 * <p>
 * (5) Create a Client Extension - to specify the renderer to use in this item {@link ASIPSHeldEntityExtension}
 * <p>
 * (6) Create a Renderer - to actually display the data {@link ASIPSHeldEntityRenderer}
 * <p>
 * [0] Register the Model Loader when {@link net.minecraftforge.client.event.ModelEvent} is fired.
 *
 * @since 1.0.0
 * @author Actually Portals
 */
@OnlyIn(Dist.CLIENT)
public class ASIPSHeldEntityModelBaker implements IUnbakedGeometry<ASIPSHeldEntityModelBaker> {

    /**
     * As per the guide in <a href="https://docs.neoforged.net/docs/1.20.4/resources/client/models/modelloaders/">the NeoForge docs</a>
     * the correct way to implement a Model Loader in minecraft 1.20.1 is the following.
     * <p>
     * Surely, I only mean to implement a custom renderer rather than an actual model baker,
     * so it feels like a huge overkill. It kinda is, but I am satisfied knowing I did it right.
     *
     * @since 1.0.0
     * @author Actually Portals
     */
    public ASIPSHeldEntityModelBaker() {}

    /**
     * Held items do not display a model at all, I just render the entity.
     * Maybe one of these days I'll see about making it display something
     * else superimposed.
     *
     * @param context Context that is ignored
     * @param baker A baker that is ignored
     * @param spriteGetter A getter that is ignored
     * @param modelState A state that is ignored
     * @param overrides Overrides that are ignored
     * @param modelLocation A location that is ignored
     * @return An empty baked model
     *
     * @since 1.0.0
     * @author Actually Portals
     */
    @Override
    public BakedModel bake(IGeometryBakingContext context, ModelBaker baker, Function<Material, TextureAtlasSprite> spriteGetter, ModelState modelState, ItemOverrides overrides, ResourceLocation modelLocation) {
        return new ASIPSHeldEntityModelBaked();
    }
}
